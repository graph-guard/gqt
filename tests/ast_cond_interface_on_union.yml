schema: >
  type Query {u: BazzOrTazzOrFoo!}
  union BazzOrTazzOrFoo = Bazz | Tazz | Foo
  type Bazz {name: String!}
  type Tazz {name: String!}
  type Foo implements InterfaceFooBar {name: String!}
  type Bar implements InterfaceFooBar {name: String!}
  interface InterfaceFooBar {name: String!}

template: >
  query { u { ... on InterfaceFooBar { name } } }

expect-ast:
  location: 0:1:1-47:1:48
  operationType: Query
  selectionSet:
    location: 6:1:7-47:1:48
    selections:
    - location: 8:1:9-45:1:46
      selectionType: field
      name:
        location: 8:1:9-9:1:10
        name: u
      type: BazzOrTazzOrFoo!
      selectionSet:
        location: 10:1:11-45:1:46
        selections:
        - location: 12:1:13-43:1:44
          selectionType: inlineFragment
          typeCondition:
            location: 19:1:20-34:1:35
            typeName: InterfaceFooBar
            type: InterfaceFooBar
          selectionSet:
            location: 35:1:36-43:1:44
            selections:
            - location: 37:1:38-41:1:42
              selectionType: field
              name:
                location: 37:1:38-41:1:42
                name: name
              type: String!

expect-ast(schemaless):
  location: 0:1:1-47:1:48
  operationType: Query
  selectionSet:
    location: 6:1:7-47:1:48
    selections:
    - location: 8:1:9-45:1:46
      selectionType: field
      name:
        location: 8:1:9-9:1:10
        name: u
      selectionSet:
        location: 10:1:11-45:1:46
        selections:
        - location: 12:1:13-43:1:44
          selectionType: inlineFragment
          typeCondition:
            location: 19:1:20-34:1:35
            typeName: InterfaceFooBar
          selectionSet:
            location: 35:1:36-43:1:44
            selections:
            - location: 37:1:38-41:1:42
              selectionType: field
              name:
                location: 37:1:38-41:1:42
                name: name
