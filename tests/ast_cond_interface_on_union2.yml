schema: >
  type Query {u: FooOrBar!}
  union FooOrBar = Foo | Bar
  type Foo implements Interface {name: String!}
  type Bar implements Interface {name: String!}
  interface Interface {name: String!}

template: >
  query { u { ... on Interface { name } } }

expect-ast:
  location: 0:1:1-41:1:42
  operationType: Query
  selectionSet:
    location: 6:1:7-41:1:42
    selections:
    - location: 8:1:9-39:1:40
      selectionType: field
      name:
        location: 8:1:9-9:1:10
        name: u
      type: FooOrBar!
      selectionSet:
        location: 10:1:11-39:1:40
        selections:
        - location: 12:1:13-37:1:38
          selectionType: inlineFragment
          typeCondition:
            location: 19:1:20-28:1:29
            typeName: Interface
            type: Interface
          selectionSet:
            location: 29:1:30-37:1:38
            selections:
            - location: 31:1:32-35:1:36
              selectionType: field
              name:
                location: 31:1:32-35:1:36
                name: name
              type: String!

expect-ast(schemaless):
  location: 0:1:1-41:1:42
  operationType: Query
  selectionSet:
    location: 6:1:7-41:1:42
    selections:
    - location: 8:1:9-39:1:40
      selectionType: field
      name:
        location: 8:1:9-9:1:10
        name: u
      selectionSet:
        location: 10:1:11-39:1:40
        selections:
        - location: 12:1:13-37:1:38
          selectionType: inlineFragment
          typeCondition:
            location: 19:1:20-28:1:29
            typeName: Interface
          selectionSet:
            location: 29:1:30-37:1:38
            selections:
            - location: 31:1:32-35:1:36
              selectionType: field
              name:
                location: 31:1:32-35:1:36
                name: name
